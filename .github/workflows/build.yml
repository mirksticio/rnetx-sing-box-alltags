name: Build and Release

on:
  schedule:
    - cron: "0 */1 * * *"
  push:
    branches:
      - main

jobs:
  tag:
    name: Generate SHA
    permissions:
      contents: write
    outputs:
      no_continue: ${{ steps.generate.outputs.no_continue }}
      upstream_commit_sha: ${{ steps.generate.outputs.upstream_commit_sha }}
      upstream_commit_message: ${{ steps.generate.outputs.upstream_commit_message }}
      tag_name: ${{ steps.generate.outputs.tag_name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate
        id: generate
        run: |
          upstream_latest_commit_json="$(wget -qO- https://api.github.com/repos/rnetx/sing-box/commits/dev)"
          upstream_latest_commit_sha="$(sed 's/[\x00-\x1f]/\\u&/g' <<< "$upstream_latest_commit_json" | jq -r '.sha' )"
          upstream_latest_tag_name="${upstream_latest_commit_sha:0:8}"
          upstream_latest_commit_message="$(sed 's/[\x00-\x1f]/\\u&/g' <<< "$upstream_latest_commit_json" | jq -r '.commit.message' )"
          
          echo "upstream_commit_sha=$upstream_latest_commit_sha" >> $GITHUB_OUTPUT
          echo "upstream_commit_message=$upstream_latest_commit_message" >> $GITHUB_OUTPUT

          self_latest_sha="$(wget -qO- https://github.com/${{ github.repository }}/releases/latest/download/commit.sha)"
          if [[ "$upstream_latest_commit_sha" == "$self_latest_sha" ]]; then
            if [[ '${{ github.event_name == 'schedule' }}' == 'true' ]]; then
              echo 'no_continue=1' >> $GITHUB_OUTPUT
            fi
          fi

          existing_tag_name="$upstream_latest_tag_name"
          counter=1
          while git rev-parse --quiet --verify "refs/tags/$existing_tag_name" >/dev/null; do
            existing_tag_name="${upstream_latest_tag_name}-${counter}"
            counter=$((counter + 1))
          done
          upstream_latest_tag_name="$existing_tag_name"

          echo "tag_name=$upstream_latest_tag_name" >> $GITHUB_OUTPUT
          echo "$upstream_latest_commit_sha" > commit.sha
      - name: Create Tag
        if: steps.generate.outputs.no_continue != '1'
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fetch_all_tags: true
          create_annotated_tag: true
          tag_prefix: ""
          custom_tag: ${{ steps.generate.outputs.tag_name }}
      - name: Upload SHA File
        uses: actions/upload-artifact@v3
        if: steps.generate.outputs.no_continue != '1'
        with:
          name: commit.sha
          path: ./commit.sha

  build:
    name: Build
    if: needs.tag.outputs.no_continue != '1'
    permissions:
      contents: read
    timeout-minutes: 90
    needs:
      - tag
    runs-on: ubuntu-latest
    container:
      image: docker.io/library/golang:1-alpine

    steps:
      - name: Install Dependencies
        run: |
          apk update && apk upgrade && apk add --no-cache jq tar xz gcc musl-dev linux-headers git make openssl-dev libevent-dev zlib-dev curl
          
      - name: Clone repository
        run: |
          git clone https://github.com/rnetx/sing-box.git -b dev sing-box-dev

      - name: Build sing-box
        run: |
          cd sing-box-dev
          make init_metacubexd
          go build \
            -trimpath \
            -buildvcs=false \
            -ldflags "-extldflags '-static' -s -w -buildid=" \
            -tags 'with_quic with_grpc with_dhcp with_wireguard with_ech with_utls with_reality_server with_acme with_clash_api with_v2ray_api with_gvisor with_embedded_tor with_lwip with_proxyprovider with_ruleprovider with_clash_dashboard staticOpenssl staticZlib staticLibevent' \
            ./cmd/sing-box

      - name: Download UPX
        run: |
          UPX_VERSION=$(echo "$(curl -s https://api.github.com/repos/upx/upx/releases/latest | jq -r '.tag_name')" |  sed 's/v//')
          wget "https://github.com/upx/upx/releases/download/v${UPX_VERSION}/upx-${UPX_VERSION}-amd64_linux.tar.xz"
          tar -xf "upx-${UPX_VERSION}-amd64_linux.tar.xz"
          mv upx-${UPX_VERSION}-amd64_linux upx-amd64_linux
          

      - name: Compress binary with UPX
        run: |
          mv ./sing-box-dev/sing-box .
          ./upx-amd64_linux/upx --no-color --mono --no-progress --ultra-brute --no-backup ./sing-box
          ./upx-amd64_linux/upx --test ./sing-box

      - name: Store binary as artifact
        uses: actions/upload-artifact@v3
        with:
          name: sing-box
          path: ./sing-box


  release:
    name: Release
    if: needs.tag.outputs.no_continue != '1'
    permissions:
      contents: write
    timeout-minutes: 10
    needs:
      - tag
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download Executable Binary Artifact
        uses: actions/download-artifact@v3
        with:
          name: sing-box
      - name: Download Upstream SHA File Artifact
        uses: actions/download-artifact@v3
        with:
          name: commit.sha
      - name: Generate Release Body
        run: |
          cat >./release_body.md <<EOF
          **Details:**
          - Repository: [rnetx/sing-box](https://github.com/rnetx/sing-box)
          - Branch: dev
          - Commit Message: ${{ needs.tag.outputs.upstream_commit_message }}
          - Commit SHA: ${{ needs.tag.outputs.upstream_commit_sha }}
          EOF
      - name: Release
        uses: softprops/action-gh-release@v1
        continue-on-error: true
        id: release_try
        with:
          name: ${{ needs.tag.outputs.tag_name }}
          prerelease: false
          body_path: ./release_body.md
          tag_name: ${{ needs.tag.outputs.tag_name }}
          files: |
            ./sing-box
            ./commit.sha
      - name: Retry Release if Failed
        continue-on-error: true
        if: steps.release_try.outcome == 'failure'
        run: |
          echo "Release Failed. Retrying..."
          env.RETRY_COUNT=0
          while [[ ${{ env.RETRY_COUNT }} -lt 5 ]]; do
            echo "Attempt ${{ env.RETRY_COUNT }}..."
            echo "Retrying Release..."
            steps.release_try.run()
            echo "Release Status: ${{ steps.release_try.outcome }}"
            if [[ ${{ steps.release_try.outcome }} == 'success' ]]; then
              echo "Release Succeeded."
              break
            fi
            env.RETRY_COUNT=$((env.RETRY_COUNT + 1))
          done
          if [[ ${{ steps.release_try.outcome }} == 'failure' ]]; then
            echo "All retry attempts failed. Exiting..."
            exit 1
          fi
